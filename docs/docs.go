// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/register": {
            "post": {
                "summary": "Register the first admin user",
                "description": "Only one admin can be created. Creates an admin account.",
                "tags": ["auth"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "required": true,
                        "description": "Admin user details",
                        "schema": {"$ref": "#/definitions/models.User"}
                    }
                ],
                "responses": {
                    "201": {"description": "Admin created successfully", "schema": {"type":"object","additionalProperties":true}},
                    "400": {"description": "invalid request or missing fields", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "403": {"description": "forbidden action", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "409": {"description": "email already exists", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description": "internal server error", "schema": {"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/login": {
            "post": {
                "summary": "Login user",
                "description": "Authenticates user and returns JWT token",
                "tags": ["auth"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "credentials",
                        "required": true,
                        "description": "Login credentials",
                        "schema": {"$ref": "#/definitions/models.LoginRequest"}
                    }
                ],
                "responses": {
                    "200": {"description": "Login successful", "schema": {"type":"object","additionalProperties":true}},
                    "400": {"description": "invalid request", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "401": {"description": "invalid credentials", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description": "internal server error", "schema": {"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/admin/createUser": {
            "post": {
                "summary": "Create a new user (Admin only)",
                "description": "Admin can create users with role 'user' or other roles.",
                "tags": ["admin"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "required": true,
                        "description": "User details",
                        "schema": {"$ref": "#/definitions/models.User"}
                    }
                ],
                "responses": {
                    "201": {"description": "User created successfully", "schema": {"type":"object","additionalProperties":true}},
                    "400": {"description": "invalid request or missing fields", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "409": {"description": "email already exists", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description": "internal server error", "schema": {"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/admin/addMedicine": {
            "post": {
                "summary": "Add medicine (Admin only)",
                "description": "Adds a new medicine to stock",
                "tags": ["admin"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "medicine",
                        "required": true,
                        "description": "Medicine details",
                        "schema": {"$ref": "#/definitions/models.Medicine"}
                    }
                ],
                "responses": {
                    "200": {"description": "Medicine added successfully", "schema": {"type":"object","additionalProperties":true}},
                    "400": {"description": "invalid request", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description": "internal server error", "schema": {"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/admin/deleteMedicine": {
            "delete": {
                "summary": "Delete medicine (Admin only)",
                "description": "Deletes a medicine from stock",
                "tags": ["admin"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "medicine",
                        "required": true,
                        "description": "Medicine to delete",
                        "schema": {"$ref": "#/definitions/models.MedicineDeleteRequest"}
                    }
                ],
                "responses": {
                    "200": {"description": "Medicine deleted", "schema": {"type":"string"}},
                    "400": {"description": "invalid request", "schema": {"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description": "internal server error", "schema": {"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/user/getAllMedicines": {
            "get": {
                "summary": "Get all medicines",
                "description": "Fetches the complete list of medicines from the database",
                "tags": ["medicines"],
                "produces": ["application/json"],
                "responses": {
                    "200": {"description": "OK", "schema": {"type":"array","items":{"$ref":"#/definitions/models.Medicine"}}},
                    "500": {"description": "internal server error", "schema": {"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/user/dispenseStock": {
            "post": {
                "summary": "Dispense medicine from stock",
                "description": "Deducts stock of a specific medicine (handles concurrency with Redis locks)",
                "tags": ["medicines"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "medicine",
                        "required": true,
                        "description": "Medicine dispense request",
                        "schema": {"$ref":"#/definitions/models.Medicine"}
                    }
                ],
                "responses": {
                    "200": {"description":"Medicine dispensed successfully","schema":{"type":"object","additionalProperties":true}},
                    "400": {"description":"Bad Request","schema":{"type":"object","additionalProperties":{"type":"string"}}},
                    "404": {"description":"Not Found","schema":{"type":"object","additionalProperties":{"type":"string"}}},
                    "409": {"description":"Conflict","schema":{"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description":"Internal Server Error","schema":{"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        },
        "/user/createPriscription": {
            "post": {
                "summary": "Create a prescription",
                "description": "Stores a new prescription in the database",
                "tags": ["prescriptions"],
                "consumes": ["application/json"],
                "produces": ["application/json"],
                "parameters": [
                    {
                        "in": "body",
                        "name": "prescription",
                        "required": true,
                        "description": "Prescription data",
                        "schema": {"$ref":"#/definitions/models.Prescription"}
                    }
                ],
                "responses": {
                    "200": {"description":"OK","schema":{"$ref":"#/definitions/models.Prescription"}},
                    "400": {"description":"Bad Request","schema":{"type":"object","additionalProperties":{"type":"string"}}},
                    "500": {"description":"Internal Server Error","schema":{"type":"object","additionalProperties":{"type":"string"}}}
                }
            }
        }
    },
    "definitions": {
        "models.User": {
            "description":"User model",
            "type":"object",
            "properties":{
                "id":{"type":"integer"},
                "name":{"type":"string"},
                "email":{"type":"string"},
                "role":{"type":"string"},
                "password":{"type":"string"}
            }
        },
        "models.LoginRequest": {
            "description":"Login credentials",
            "type":"object",
            "properties":{
                "email":{"type":"string"},
                "password":{"type":"string"}
            }
        },
        "models.Medicine": {
            "description":"Details of a medicine including stock and dosage form",
            "type":"object",
            "properties":{
                "id":{"type":"integer"},
                "name":{"type":"string"},
                "dosage_form":{"type":"string"},
                "stock_quantity":{"type":"integer"}
            }
        },
        "models.MedicineDeleteRequest": {
            "description":"Medicine delete request",
            "type":"object",
            "properties":{
                "name":{"type":"string"}
            }
        },
        "models.Prescription": {
            "description":"Contains patient info and prescribed medicine details",
            "type":"object",
            "properties":{
                "id":{"type":"integer"},
                "patientname":{"type":"string"},
                "medicinename":{"type":"string"},
                "dosage":{"type":"string"},
                "quantity":{"type":"integer"}
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {"type":"apiKey","name":"Authorization","in":"header"}
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9000",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Prescription Dispensing System API",
	Description:      "API for managing prescriptions, medicines, and dispensing",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

// @title Prescription Dispensing System API
// @version 1.0
// @description API for managing prescriptions, medicines, and dispensing
// @host localhost:9000
// @BasePath /api
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
package main

import (
	_ "PrescriptionDispensingSystem/docs"
	"PrescriptionDispensingSystem/internals/cache"
	"PrescriptionDispensingSystem/internals/db"
	"PrescriptionDispensingSystem/internals/handlers"
	"PrescriptionDispensingSystem/internals/middleware"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/joho/godotenv"

	// Swagger docs generated by swag

	"github.com/gofiber/swagger" // Fiber Swagger middleware
)

func main() {
	db.DBConnect()
	cache.InitRedis()
	godotenv.Load()

	

	app := fiber.New()
	app.Use(cors.New(cors.Config{
    	AllowOrigins: "*", // or specific: "http://localhost:5173"
    	AllowMethods: "GET,POST,PUT,DELETE,OPTIONS",
    	AllowHeaders: "Origin, Content-Type, Accept, Authorization",
	}))


	// Auth routes
	auth := app.Group("/api")

	// Register godoc
	// @Summary Register a new user
	// @Description Create a new account with username and password
	// @Tags auth
	// @Accept json
	// @Produce json
	// @Param user body handlers.RegisterRequest true "Register User"
	// @Success 200 {object} handlers.RegisterResponse
	// @Router /register [post]
	// @Security BearerAuth

	auth.Post("/register", handlers.Register)

	// Login godoc
	// @Summary Login user
	// @Description Authenticate and get JWT token
	// @Tags auth
	// @Accept json
	// @Produce json
	// @Param credentials body handlers.LoginRequest true "Login"
	// @Success 200 {object} handlers.LoginResponse
	// @Router /login [post]
	// @Security BearerAuth

	auth.Post("/login", handlers.Login)

	// Admin routes
	admin := app.Group("/api/admin", middleware.AdminVerification)

	// CreateUser godoc
	// @Summary Create a user (Admin only)
	// @Tags admin
	// @Accept json
	// @Produce json
	// @Param user body handlers.CreateUserRequest true "New User"
	// @Success 200 {object} handlers.CreateUserResponse
	// @Router /admin/createUser [post]
	// @Security BearerAuth

	admin.Post("/createUser", handlers.CreateUsers)

	// AddMedicine godoc
	// @Summary Add medicine (Admin only)
	// @Tags admin
	// @Accept json
	// @Produce json
	// @Param medicine body handlers.MedicineRequest true "Medicine"
	// @Success 200 {object} handlers.MedicineResponse
	// @Router /admin/addMedicine [post]
	// @Security BearerAuth

	admin.Post("/addMedicine", handlers.AddMedicine)

	// DeleteMedicine godoc
	// @Summary Delete medicine (Admin only)
	// @Tags admin
	// @Accept json
	// @Produce json
	// @Param medicine body handlers.DeleteMedicineRequest true "Medicine"
	// @Success 200 {string} string "deleted"
	// @Router /admin/deleteMedicine [delete]
	// @Security BearerAuth

	admin.Delete("/deleteMedicine", handlers.DeleteMedicine)

	// User routes
	routes := app.Group("/api/user", middleware.Verification)

	// GetAllMedicines godoc
	// @Summary Get all medicines
	// @Tags user
	// @Produce json
	// @Success 200 {array} handlers.MedicineResponse
	// @Router /user/getAllMedicines [get]
	// @Security BearerAuth

	routes.Get("/getAllMedicines", handlers.GetAllMedicnes)

	// DispenseStock godoc
	// @Summary Dispense medicine stock
	// @Tags user
	// @Accept json
	// @Produce json
	// @Param request body handlers.DispenseRequest true "Dispense"
	// @Success 200 {object} handlers.DispenseResponse
	// @Router /user/dispenseStock [post]
	// @Security BearerAuth

	routes.Post("/dispenseStock", handlers.DispenseStock)

	// CreatePrescription godoc
	// @Summary Create prescription
	// @Tags user
	// @Accept json
	// @Produce json
	// @Param prescription body handlers.PrescriptionRequest true "Prescription"
	// @Success 200 {object} handlers.PrescriptionResponse
	// @Router /user/createPriscription [post]
	// @Security BearerAuth

	routes.Post("/createPriscription", handlers.CreatePriscription)

	// Swagger docs route
	app.Get("/swagger/*", swagger.HandlerDefault)

	// Serve raw OpenAPI yaml if needed
	app.Static("/docs", "./openapi.yaml")

	app.Listen(":9000")
}
